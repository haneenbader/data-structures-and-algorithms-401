/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void pushManyStack(){
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(1);
        assertNotNull("5 1 null",stack.toString());

    }
    @Test void pushStack() {
        Stack<Integer> stack = new Stack<>();
        stack.push(2);
        assertNotNull("2 null",stack.toString());

    }
    @Test void stackPop(){
        Stack<Integer> stack = new Stack<>();
        stack.push(2);
        stack.push(1);
        stack.push(8);
    }
    @Test void emptyStack(){
        Stack<Integer> stack = new Stack<>();
        stack.push(8);
        stack.pop();
        assertNotNull(" null" ,stack.toString());
    }
    @Test void push() {
        Queue<String> queue = new Queue<>();
        queue.enqueue("2");
        assertNotNull( " 2  null" , queue.toString());
    }
    @Test void pushManyQueue() {
        Queue<String> queue = new Queue<>();
        queue.enqueue("5");
        queue.enqueue("8");
        assertNotNull( "5 8 Null" , queue.toString());
    }
    @Test void peek() {
        Queue<String> queue = new Queue<>();
        queue.enqueue("7");
        queue.enqueue("8");
        assertNotNull( "7" , queue.peek());
    }
    @Test void emptyQueue() {
        Queue<String> queue = new Queue<>();
        queue.enqueue("1");
        queue.enqueue("8");
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();

        assertNotNull( "null" , queue.toString());

    }
    @Test void deQueue() {
        Queue<String> queue = new Queue<>();
        queue.enqueue("1");
        queue.enqueue("5");

        assertNotNull( "1" , queue.dequeue());
    }


    @Test void validateBracketsTest(){
        // testing for a correct brackets
        String test = "{}(){}";
        assertTrue(App.brackets(test));


        // testing for a wrong brackets
        test = "[({}]";
        assertFalse(App.brackets(test));

    }
}
