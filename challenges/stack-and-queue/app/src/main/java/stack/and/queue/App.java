/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        Stack<Integer> newS = new Stack<>();
        newS.push(4);
        System.out.println(newS.top.value);
        newS.pop();
        System.out.println(newS.isEmpty());


        Queue<Integer> newQ = new Queue<>();
        newQ.enqueue(6);
        System.out.println(newQ.dequeue());


//-------------------------CC11-----------------------------


        PseudoQueue pseudo = new PseudoQueue();

        pseudo.enqueue(4);
        pseudo.enqueue(6);
        pseudo.dequeue();
        pseudo.enqueue(10);
        pseudo.dequeue();
        System.out.println(pseudo.stackOne.toString());

//-------------------------CC12-----------------------------
        AnimalShelter animalShelter = new AnimalShelter();
        System.out.println(animalShelter);
        animalShelter.dequeue("cat");
        animalShelter.dequeue("dog");
        Animal animal = new Dog();
        animalShelter.enqueue(animal);
    }
//-----------------------CC13----------------------------
//        Return: boolean
//        representing whether or not the brackets in the string are balanced
//
//There are 3 types of brackets:
//
//    Round Brackets : ()
//    Square Brackets : []
//    Curly Brackets : {}

public static boolean brackets (String string) {
    Stack<String> validateStack = new Stack<>();
    if (string.isEmpty()) return true;

    String[] bracketArray= string.split("");
    for (String character:bracketArray){
        if (character.equals("[") || character.equals("{") || character.equals("(")) {
//             add
            validateStack.push(character);

            if ((character.equals("]") || character.equals("}") || character.equals(")"))) {
                return false;
            }
            if (validateStack.isEmpty()) return false;

        }else if (character.equals("}")) {
//            delete top
            if (validateStack.top.value.equals("{")) validateStack.pop();
            else return false;
        } else if (character.equals(")")) {
            if (validateStack.top.value.equals("(")) validateStack.pop();
            else return false;
        } else if (character.equals("]")) {
            if (validateStack.top.value.equals("[")) validateStack.pop();
            else return false;
        }

    }
    return validateStack.isEmpty();
}

}
