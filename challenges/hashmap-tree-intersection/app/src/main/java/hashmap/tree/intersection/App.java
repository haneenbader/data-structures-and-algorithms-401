/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashmap.tree.intersection;

import java.util.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());


        BinaryTree<Integer> oneTree = new BinaryTree<>();
        oneTree.setRoot(new Node<>(150));
        oneTree.getRoot().setRight(new Node<>(250)) ;
        oneTree.getRoot().setLeft(new Node<>(100));
        oneTree.getRoot().getRight().setRight(new Node<>(350));
        oneTree.getRoot().getRight().getRight().setRight(new Node<>(500));
        oneTree.getRoot().getRight().getRight().setLeft(new Node<>(300));
        oneTree.getRoot().getRight().setLeft(new Node<>(200)) ;

        BinaryTree<Integer> twoTree = new BinaryTree<>();
        twoTree.setRoot(new Node<>(42));
        twoTree.getRoot().setRight(new Node<>(600)) ;
        twoTree.getRoot().setLeft(new Node<>(100));
        twoTree.getRoot().getRight().setRight(new Node<>(350));
        twoTree.getRoot().getRight().getRight().setRight(new Node<>(500));
        twoTree.getRoot().getRight().getRight().setLeft(new Node<>(4));
        twoTree.getRoot().getRight().setLeft(new Node<>(200)) ;
        twoTree.getRoot().getLeft().setLeft(new Node<>(15))  ;

        System.out.println(treeIntersection(oneTree, twoTree).toString());


    }




    public static HashSet treeIntersection(BinaryTree oneTree, BinaryTree twoTree){

        List list1 =oneTree.inOrder(oneTree.getRoot());
        List list2=twoTree.inOrder(twoTree.getRoot());
        HashSet result=new HashSet();
        for (Object value:list1){
            if (list2.contains(value)){
                result.add(value);
            }
        }
        return result;
    }


}
